// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/hoge.proto

package hogeconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	hoge "github.com/hiroto60/test_dolce_ci/gen/hoge"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HogeName is the fully-qualified name of the Hoge service.
	HogeName = "hoge.Hoge"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HogeHogeProcedure is the fully-qualified name of the Hoge's Hoge RPC.
	HogeHogeProcedure = "/hoge.Hoge/Hoge"
)

// HogeClient is a client for the hoge.Hoge service.
type HogeClient interface {
	Hoge(context.Context, *connect.Request[hoge.HogeRequest]) (*connect.Response[hoge.HogeResponse], error)
}

// NewHogeClient constructs a client for the hoge.Hoge service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHogeClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HogeClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hogeMethods := hoge.File_proto_hoge_proto.Services().ByName("Hoge").Methods()
	return &hogeClient{
		hoge: connect.NewClient[hoge.HogeRequest, hoge.HogeResponse](
			httpClient,
			baseURL+HogeHogeProcedure,
			connect.WithSchema(hogeMethods.ByName("Hoge")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hogeClient implements HogeClient.
type hogeClient struct {
	hoge *connect.Client[hoge.HogeRequest, hoge.HogeResponse]
}

// Hoge calls hoge.Hoge.Hoge.
func (c *hogeClient) Hoge(ctx context.Context, req *connect.Request[hoge.HogeRequest]) (*connect.Response[hoge.HogeResponse], error) {
	return c.hoge.CallUnary(ctx, req)
}

// HogeHandler is an implementation of the hoge.Hoge service.
type HogeHandler interface {
	Hoge(context.Context, *connect.Request[hoge.HogeRequest]) (*connect.Response[hoge.HogeResponse], error)
}

// NewHogeHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHogeHandler(svc HogeHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hogeMethods := hoge.File_proto_hoge_proto.Services().ByName("Hoge").Methods()
	hogeHogeHandler := connect.NewUnaryHandler(
		HogeHogeProcedure,
		svc.Hoge,
		connect.WithSchema(hogeMethods.ByName("Hoge")),
		connect.WithHandlerOptions(opts...),
	)
	return "/hoge.Hoge/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HogeHogeProcedure:
			hogeHogeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHogeHandler returns CodeUnimplemented from all methods.
type UnimplementedHogeHandler struct{}

func (UnimplementedHogeHandler) Hoge(context.Context, *connect.Request[hoge.HogeRequest]) (*connect.Response[hoge.HogeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hoge.Hoge.Hoge is not implemented"))
}
